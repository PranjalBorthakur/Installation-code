Install Python and pip: 
  -sudo apt-get update && sudo apt-get -y upgrade
   When prompted to configure grub-pc, you can press ENTER to accept the default, or configure as desired.
   
  -sudo apt-get install python3
  -python3 -V
  
Pip in order to install packages from PyPi, Python’s package repository:
  -sudo apt-get install -y python3-pip
  -pip3 -V
  
  
Install virtualenv:
  -pip3 install virtualenv
  -virtualenv --version
  
Install Django:
Option 1: Install Django within a virtualenv.
  This is ideal for when you need your version of Django to be isolated from the global environment of your server.
Option 2: Install Django from Source.
  If you want the latest software or want something newer than what your Ubuntu APT repository offers, you can install directly from source.
  Note that opting for this installation method requires constant attention and maintenance if you want your version of the software to be
  up to date.
Option 3: Install Django Globally with pip.
  The option we are going with is pip 3 as we will be installing Django globally.
  
Run the following command to create a directory called django-apps, or another name of your choice. Then navigate to the directory:
  -mkdir django-apps
  -cd django-apps
  -virtualenv env
  -. env/bin/activate

Creating a Django Test Project(inside the virtualenv):
  -sudo ufw allow 8000
  -django-admin startproject testsite
  -cd testsite
  -ls
  -less manage.py
  -cd testsite/
  -ls
  
You can use your favorite text editor to add your ip address. For example, if you're using nano, just simply run the
following command:
  -nano ~/django-apps/testsite/testsite/settings.py
  
              settings.py
"""
Django settings for testsite project.

Generated by 'django-admin startproject' using Django 2.0.
...
"""
...
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Edit the line below with your server IP address
ALLOWED_HOSTS = ['your-server-ip']
...

  -cd ~/django-apps/testsite/
Now, run the following command replacing the your-server-ip text with the IP of your server:
  -python manage.py runserver your-server-ip:8000
  
Finally, you can navigate to the below link to see what your skeleton website looks like, again replacing the highlighted
text with your server’s actual IP:
  -http://your-server-ip:8000/
